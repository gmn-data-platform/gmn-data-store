# Airflow generated using: curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.2.3/docker-compose.yaml'

version: '3.3'

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pytest==6.2.5 kafka-python==2.0.2 gmn-python-api==0.0.1 kafka-python==2.0.2 fastavro==1.4.9 pandavro==1.6.0 numpy>1.20.3}
    PYTHONPATH: "/home/airflow/.local/lib/python3.7/site-packages"
  volumes:
    - ./gmn_data_ingestor/:/opt/airflow/dags
    - ./gmn_data_ingestor/airflow_logs:/opt/airflow/logs
    - ./gmn_data_ingestor/extracted_data:/home/airflow/extracted_data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    ksqldb-init:
      condition: service_started

services:
  # Kafka ------------------------------------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME:
        2000

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
    - zookeeper
    - kafka-broker
    ports:
    - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'

  kafka-broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka-broker
    restart: always
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - db
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

  kafka-init:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - kafka-broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
              cub kafka-ready -b kafka-broker:29092 1 30 && \
              kafka-topics --create --topic extracted --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
              kafka-topics --create --topic extracted_failed --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
              kafka-topics --create --topic transformed --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
              kafka-topics --create --topic transformed_failed --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
              kafka-topics --create --topic loaded --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
              kafka-topics --create --topic loaded_failed --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181'"

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.23.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - zookeeper
      - kafka-broker
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-broker:29092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  ksqldb-init:
    image: confluentinc/ksqldb-server:0.23.1
    container_name: ksql-init
    depends_on:
      - kafka-init
      - ksqldb-server
      - schema-registry
    volumes:
      - ./gmn_data_ingestor/ksql_scripts/:/data/scripts/
      - ./gmn_data_ingestor/avro/:/avro/
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo -e "\n\n Waiting for KSQL to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) -eq 000 ]
        do
          echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running KSQL commands\n"
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/extracted-value/versions
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/extracted_failed-value/versions
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/transformed-value/versions
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/transformed_failed-value/versions
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/loaded-value/versions
        curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '$$(</avro/trajectory_summary_schema.avsc)' http://schema-registry:8081/subjects/loaded_failed-value/versions 
        cat /data/scripts/ksql-init.sql <(echo 'EXIT')| ksql http://ksqldb-server:8088/
        echo -e "\n\n-> Sleepingâ€¦\n"
        sleep infinity

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.23.1
    container_name: ksqldb-cli
    depends_on:
      - kafka-broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  # Postgres ---------------------------------------------------------------------------
  db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - gmn_data_store-postgres-db-volume:/var/lib/postgresql/data
    env_file:
      - ./database/.env

  db-init:
    image: python:3.7.12
    depends_on:
      - db
    entrypoint: /bin/sh
    tty: true
    command: -c "python -m pip install -r /database/requirements.txt && python /database/setup_database.py"
    volumes:
      - ./database:/database


  # Airflow ----------------------------------------------------------------------------
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:5.0.3-alpine
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/airflow_logs
        chown -R "${AIRFLOW_UID}:0" /sources/airflow_logs
        chown -R "${AIRFLOW_UID}:0" /source/extracted_data
        chmod 777 /sources/extracted_data
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ./gmn_data_ingestor:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

# Volumes ------------------------------------------------------------------------------
volumes:
  airflow-postgres-db-volume:
  gmn_data_store-postgres-db-volume: